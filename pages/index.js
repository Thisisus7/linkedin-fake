import { getSession, useSession } from 'next-auth/react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { AnimatePresence } from 'framer-motion';
import { useRecoilState } from 'recoil';

import Header from '@/components/Header/Header';
import Sidebar from '@/components/Sidebar';
import Feed from '@/components/Feed/Feed';
import { modalState, modalTypeState } from '@/atoms/modalAtom';
import Modal from '@/components/Feed/Modal';
import { connectToDatabase } from '@/util/mongodb';
import Widgets from '@/components/Widgets';

export default function Home({ posts, articles }) {
  const [modalOpen, setModalOpen] = useRecoilState(modalState);  // key
  const [modalType, setModalType] = useRecoilState(modalTypeState); 
  // Client side
  const router = useRouter();
  const { status } = useSession({
    required: true,
    onUnauthenticated() {
      // The user is not authenticated, handle it here.
      router.push("/home");
    },
  });

  return (
    <div className='bg-[#F3f2EF] dark:bg-black dark:text-white h-screen overflow-y-scroll md:space-y-4'>
      <Head>
        <title>(0) Feed | Linkedin</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/lin.jpg" />
      </Head>
      
      <Header />
      <main className='flex justify-center gap-x-5 px-4 sm:px-12'>  {/* gap: good for space in both x and y axis */}
        <div className='flex flex-col md:flex-row gap-x-5 gap-5'>
          <Sidebar />
          <Feed posts={posts}/>
        </div>
        <Widgets articles={articles} />
        <AnimatePresence>
          {modalOpen && (
            <Modal handleClose={() => setModalOpen(false)} type={modalType} />
          )}
        </AnimatePresence>
      </main>
    </div>
  )
}

// Server side
export async function getServerSideProps(context) {
  // Check if the user is authenticated on the server
  const session = await getSession(context);
  if (!session) {
    return {
      redirect: {
        permanent: false,
        destination: "/home",
      },
    };
  }

  // Get posts on SSR
  const {db} = await connectToDatabase();
  const posts = await db
    .collection("posts")
    .find()
    .sort({ timestamp: -1 })
    .toArray(); 

  // Get Google News API
  const results = await fetch(
    `https://newsapi.org/v2/top-headlines?country=us&apiKey=${process.env.NEWS_API_KEY}`
  ).then((res) => res.json());

  return {
    props: {
      session,
      articles: results.articles,
      posts: posts.map((post) => ({
        _id: post._id.toString(),
        input: post.input,
        photoUrl: post.photoUrl,
        username: post.username,
        email: post.email,
        userImg: post.userImg,
        createAt: post.createAt,
      })),
    },
  };
}
